<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gongpingjia.carplay.po.Message">
	<resultMap id="BaseResultMap" type="com.gongpingjia.carplay.po.Message">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="fromUser" property="fromuser" jdbcType="VARCHAR" />
		<result column="toUser" property="touser" jdbcType="VARCHAR" />
		<result column="type" property="type" jdbcType="VARCHAR" />
		<result column="content" property="content" jdbcType="VARCHAR" />
		<result column="extra1" property="extra1" jdbcType="VARCHAR" />
		<result column="extra2" property="extra2" jdbcType="INTEGER" />
		<result column="extra3" property="extra3" jdbcType="VARCHAR" />
		<result column="remarks" property="remarks" jdbcType="VARCHAR" />
		<result column="isChecked" property="ischecked" jdbcType="TINYINT" />
		<result column="isDeleted" property="isdeleted" jdbcType="TINYINT" />
		<result column="createTime" property="createtime" jdbcType="BIGINT" />
	</resultMap>


	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		id, fromUser, toUser, type, content, extra1,
		extra2, extra3, remarks, isChecked,
		isDeleted, createTime
		from message
		where id = #{id,jdbcType=VARCHAR}
	</select>

	<select id="selectCountByUserAndTypeComment" resultType="java.lang.Integer"
		parameterType="java.util.Map">
		select count(1) as count from message where toUser =
		#{userId,jdbcType=VARCHAR} and isChecked = 0
		and type = #{type,jdbcType=VARCHAR}
	</select>

	<select id="selectCountByUserAndTypeNotComment" resultType="java.lang.Integer"
		parameterType="java.util.Map">
		select count(1) as count from message where toUser =
		#{userId,jdbcType=VARCHAR} and isChecked = 0
		and type is not null and type not like #{type,jdbcType=VARCHAR}
	</select>

	<select id="selectContentByUserAndTypeComment" resultType="java.util.Map"
		parameterType="java.util.Map">
		select 
			ifnull(content, "") as content,
			createTime,
			type		
		from message 
		where toUser = #{userId,jdbcType=VARCHAR}
		and isChecked = 0 and type = #{type,jdbcType=VARCHAR} order by createTime
		desc limit 1
	</select>

	<select id="selectContentByUserAndTypeNotComment" resultType="java.util.Map"
		parameterType="java.util.Map">
		select 
			ifnull(content, "") as content,
			createTime,
			type		
		from message
		where toUser = #{userId,jdbcType=VARCHAR}
		and isChecked = 0 and type is not null
		and type not like #{type,jdbcType=VARCHAR}
		order by createTime desc limit 1
	</select>

	<select id="selectMessageListByUserAndTypeComment" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT
			message.id AS messageId,
			ifnull(message.extra1, "") AS activityId,
			message.type,
			message.fromUser AS userId,
			concat(
			#{assetImgUrl,jdbcType=VARCHAR}, user.photo, "?imageView2/1/w/200") AS photo,
			USER .nickname,
			(YEAR (sysdate()) - USER .birthYear) AS age,
			USER .gender,
			ifnull(concat(#{brandImgUrl,jdbcType=VARCHAR} , car.brandLogo), "") as carBrandLogo,
			ifnull(car.model, "") AS carModel,
			ifnull((YEAR (sysdate()) - USER .drivingLicenseYear),0) AS drivingExperience,
			message.content,
			ifnull(message.extra2, 0) AS seat,
			ifnull(message.extra3, "") AS applicationId,
			message.createTime,
			ifnull(message.remarks, "") AS remarks
		FROM
				message
		LEFT JOIN USER ON USER .id = message.fromUser
		LEFT JOIN car ON car.userId = USER .id
		WHERE
			message.toUser = #{userId,jdbcType=VARCHAR} 
		AND message.type = #{type,jdbcType=VARCHAR} 
		AND message.isDeleted = 0
		ORDER BY
			message.createTime DESC
		LIMIT #{ignore,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
	</select>
	
	<select id="selectMessageListByUserAndTypeNotComment" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT
			message.id AS messageId,
			ifnull(message.extra1, "") AS activityId,
			message.type,
			message.fromUser AS userId,
			concat(
			#{assetImgUrl,jdbcType=VARCHAR}, user.photo, "?imageView2/1/w/200") AS photo,
			USER .nickname,
			(YEAR (sysdate()) - USER .birthYear) AS age,
			USER .gender,
			ifnull(concat(#{brandImgUrl,jdbcType=VARCHAR} , car.brandLogo), "") as carBrandLogo,
			ifnull(car.model, "") AS carModel,
			ifnull((YEAR (sysdate()) - USER .drivingLicenseYear),0) AS drivingExperience,
			message.content,
			ifnull(message.extra2, 0) AS seat,
			ifnull(message.extra3, "") AS applicationId,
			message.createTime,
			ifnull(message.remarks, "") AS remarks
		FROM
				message
		LEFT JOIN USER ON USER .id = message.fromUser
		LEFT JOIN car ON car.userId = USER .id
		WHERE
			message.toUser = #{userId,jdbcType=VARCHAR}
		AND	message.type IS NOT NULL 
		AND message.type NOT LIKE  #{type,jdbcType=VARCHAR}
		AND message.isDeleted = 0
		ORDER BY
			message.createTime DESC
		LIMIT #{ignore,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
	</select>
	
	<select id="selectByMeesageIdAndUserId" resultMap="BaseResultMap" parameterType="java.util.Map">
		select 
		id, fromUser, toUser, type, content, extra1,
		extra2, extra3, remarks, isChecked,isDeleted, createTime 
		from message where id = #{messageId,jdbcType=VARCHAR} 
		and toUser =#{userId,jdbcType=VARCHAR} and isDeleted = 0
	</select>
	
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from
		message
		where id = #{id,jdbcType=VARCHAR}
	</delete>

	<insert id="insert" parameterType="com.gongpingjia.carplay.po.Message">
		insert into message (id,
		fromUser, toUser,
		type, content, extra1,
		extra2, extra3, remarks,
		isChecked, isDeleted, createTime)
		values (#{id,jdbcType=VARCHAR},
		#{fromuser,jdbcType=VARCHAR}, #{touser,jdbcType=VARCHAR},
		#{type,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR},
		#{extra1,jdbcType=VARCHAR},
		#{extra2,jdbcType=INTEGER},
		#{extra3,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR},
		#{ischecked,jdbcType=TINYINT}, #{isdeleted,jdbcType=TINYINT},
		#{createtime,jdbcType=BIGINT})
	</insert>

	<update id="updateByPrimaryKey" parameterType="com.gongpingjia.carplay.po.Message">
		update message
		set
		fromUser = #{fromuser,jdbcType=VARCHAR},
		toUser =
		#{touser,jdbcType=VARCHAR},
		type = #{type,jdbcType=VARCHAR},
		content =
		#{content,jdbcType=VARCHAR},
		extra1 = #{extra1,jdbcType=VARCHAR},
		extra2 = #{extra2,jdbcType=INTEGER},
		extra3 =
		#{extra3,jdbcType=VARCHAR},
		remarks = #{remarks,jdbcType=VARCHAR},
		isChecked = #{ischecked,jdbcType=TINYINT},
		isDeleted =
		#{isdeleted,jdbcType=TINYINT},
		createTime =
		#{createtime,jdbcType=BIGINT}
		where id = #{id,jdbcType=VARCHAR}
	</update>
	
	<update id="updateIsCheckedByUserAndTypeComment" parameterType="java.util.Map">
		update message set isChecked=1 where toUser=#{userId,jdbcType=VARCHAR} and type=#{type,jdbcType=VARCHAR}
	</update>
	
	<update id="updateIsCheckedByUserAndTypeNotComment" parameterType="java.util.Map">
		update message set isChecked=1 where toUser=#{userId,jdbcType=VARCHAR} and type is not null and type not like #{type,jdbcType=VARCHAR}
	</update>
	
	<update id="updateRemarksByExtra3" parameterType="java.util.Map">
		UPDATE message 
		SET remarks = #{remarks,jdbcType=VARCHAR}
		WHERE extra3 = #{extra3,jdbcType=VARCHAR}
	</update>
	
	<update id="updateIsDeletedByMessageId" parameterType="java.lang.String">
		update message set isDeleted=1 where id=#{messageId,jdbcType=VARCHAR}
	</update>
	
</mapper>